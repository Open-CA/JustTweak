//
//  AccessorCodeGenerator.swift
//  Copyright Â© 2021 Just Eat Takeaway. All rights reserved.
//

import Foundation

enum TweakPropertyCodeGeneratorContentType {
    case constants
    case accessor
}

class TweakPropertyCodeGenerator {
    
    private let featuresConst = "Features"
    private let variablesConst = "Variables"
    
    private let featureConstantsConst = "<FEATURE_CONSTANTS_CONST>"
    private let variableConstantsConst = "<VARIABLE_CONSTANTS_CONST>"
    private let classContentConst = "<CLASS_CONTENT>"
    private let tweakManagerConst = "<TWEAK_MANAGER_CONTENT>"
    
    func generate(type: TweakPropertyCodeGeneratorContentType,
                  localConfigurationFilename: String,
                  className: String,
                  localConfigurationContent: Configuration) -> String {
        switch type {
        case .constants:
            return generateConstants(localConfigurationFilename: localConfigurationFilename,
                                     className: className,
                                     localConfigurationContent: localConfigurationContent)
        case .accessor:
            return generateAccessor(localConfigurationFilename: localConfigurationFilename,
                                    className: className,
                                    localConfigurationContent: localConfigurationContent)
        }
    }
}

extension TweakPropertyCodeGenerator {
    
    private func generateConstants(localConfigurationFilename: String, className: String, localConfigurationContent: Configuration) -> String {
        let template = self.constantsTemplate(className: className)
        let featureConstants = self.featureConstants(localConfigurationContent: localConfigurationContent)
        let variableConstants = self.variableConstants(localConfigurationContent: localConfigurationContent)
        
        let content = template
            .replacingOccurrences(of: featureConstantsConst, with: featureConstants)
            .replacingOccurrences(of: variableConstantsConst, with: variableConstants)
        return content
    }
    
    private func generateAccessor(localConfigurationFilename: String, className: String, localConfigurationContent: Configuration) -> String {
        let template = self.accessorTemplate(className: className)
        let tweakManager = self.tweakManager(localConfigurationFilename: localConfigurationFilename)
        let classContent = self.classContent(localConfigurationContent: localConfigurationContent)
        
        let content = template
            .replacingOccurrences(of: tweakManagerConst, with: tweakManager)
            .replacingOccurrences(of: classContentConst, with: classContent)
        return content
    }
    
    private func constantsTemplate(className: String) -> String {
        """
        //
        //  \(className)+Constants.swift
        //  Generated by TweakPropertyGenerator
        //
        
        import Foundation
        
        extension \(className) {
        
        \(featureConstantsConst)
        
        \(variableConstantsConst)
        }
        """
    }
    
    private func accessorTemplate(className: String) -> String {
        """
        //
        //  \(className).swift
        //  Generated by TweakPropertyGenerator
        //
        
        import Foundation
        import JustTweak
        
        class \(className) {

        \(tweakManagerConst)
        
        \(classContentConst)
        }
        """
    }
    
    private func featureConstants(localConfigurationContent: Configuration) -> String {
        var features = Set<FeatureKey>()
        for tweak in localConfigurationContent.tweaks {
            features.insert(tweak.feature)
        }
        let content: [String] = features.map {
            """
                    static let \($0.camelCased()) = "\($0)"
            """
        }
        return """
            struct \(featuresConst) {
        \(Array(content).sorted().joined(separator: "\n"))
            }
        """
    }
    
    private func variableConstants(localConfigurationContent: Configuration) -> String {
        var variables = Set<VariableKey>()
        for tweak in localConfigurationContent.tweaks {
            variables.insert(tweak.variable)
        }
        let content: [String] = variables.map {
            """
                    static let \($0.camelCased()) = "\($0)"
            """
        }
        return """
            struct \(variablesConst) {
        \(Array(content).sorted().joined(separator: "\n"))
            }
        """
    }
    
    private func tweakManager(localConfigurationFilename: String) -> String {
        """
            static let tweakManager: TweakManager = {
                let userDefaultsConfiguration = UserDefaultsConfiguration(userDefaults: UserDefaults.standard)
                
                let jsonFileURL = Bundle.main.url(forResource: "\(localConfigurationFilename)", withExtension: "json")!
                let localConfiguration = LocalConfiguration(jsonURL: jsonFileURL)
                
                let configurations: [Configuration] = [userDefaultsConfiguration, localConfiguration]
                return TweakManager(configurations: configurations)
            }()
                
            private var tweakManager: TweakManager {
                return Self.tweakManager
            }
        """
    }
    
    private func classContent(localConfigurationContent: Configuration) -> String {
        var content: Set<String> = []
        localConfigurationContent.tweaks.forEach {
            content.insert(tweakProperty(for: $0))
        }
        return content.sorted().joined(separator: "\n\n")
    }
    
    private func tweakProperty(for tweak: Tweak) -> String {
        let propertyName = tweak.propertyName ?? tweak.variable.camelCased()
        return """
            @TweakProperty(feature: \(featuresConst).\(tweak.feature.camelCased()),
                           variable: \(variablesConst).\(tweak.variable.camelCased()),
                           tweakManager: tweakManager)
            var \(propertyName): \(tweak.valueType)
        """
    }
}
